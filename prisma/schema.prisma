generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CompanyAddress {
  id               BigInt   @id @default(autoincrement())
  companyId        BigInt
  province         String   @db.VarChar(255)
  barangay         String   @db.VarChar(255)
  cityMunicipality String   @db.VarChar(255)
  houseNo          String   @db.VarChar(255)
  region           String   @db.VarChar(255)
  street           String   @db.VarChar(255)
  subdivision      String?  @db.VarChar(255)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  company          Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
}

model CompanyProponent {
  id            BigInt   @id @default(autoincrement())
  companyId     BigInt
  contactPerson String   @db.VarChar(255)
  contactNumber String   @db.VarChar(255)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
}

model Company {
  id                BigInt             @id @default(autoincrement())
  companyName       String             @db.VarChar(255)
  tinNumber         String?            @db.VarChar(255)
  type              CompanyType
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  companyAddresses  CompanyAddress[]
  companyProponents CompanyProponent[]
  poDetails         PoDetail[]
  prDetails         PrDetail[]
  projects          Project[]
  quotationDetails  QuotationDetail[]
}

model FormItem {
  id            BigInt   @id @default(autoincrement())
  formId        BigInt
  productId     BigInt?
  quantity      BigInt?
  supplierName  String?  @db.VarChar(255)
  supplierPrice BigInt?
  clientPrice   BigInt?
  total         BigInt?
  remarks       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  form          Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  product       Product? @relation(fields: [productId], references: [id])

  @@index([formId])
  @@index([productId])
}

model FormRemark {
  id        BigInt   @id @default(autoincrement())
  formId    BigInt
  userId    BigInt
  remarks   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([formId])
  @@index([userId])
}

model Form {
  id             BigInt         @id @default(autoincrement())
  lifecycleId    BigInt
  projectId      BigInt
  parentId       BigInt?
  detailId       BigInt
  stageId        BigInt
  type           FormType
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  lifecycle      Lifecycle      @relation(fields: [lifecycleId], references: [id], onDelete: Cascade)
  parentForm     Form?          @relation("FormToForm", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  childForms     Form[]         @relation("FormToForm")
  lifecycleStage LifecycleStage @relation(fields: [stageId], references: [id])
  formItems      FormItem[]
  formRemarks    FormRemark[]

  @@index([lifecycleId])
  @@index([parentId])
  @@index([stageId])
}

model LifecycleStage {
  id                BigInt            @id @default(autoincrement())
  templateId        BigInt
  name              String            @db.VarChar(255)
  code              String            @db.VarChar(255)
  order             Int
  requiresApproval  Boolean
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  approvalType      ApprovalType?
  stageOwner        Json?
  forms             Form[]
  lifecycles        Lifecycle[]
  lifecycleTemplate LifecycleTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

model LifecycleTemplate {
  id              BigInt           @id @default(autoincrement())
  name            String           @db.VarChar(255)
  description     String           @db.VarChar(255)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lifecycles      Lifecycle[]
  lifecycleStages LifecycleStage[]
}

model Lifecycle {
  id                BigInt            @id @default(autoincrement())
  templateId        BigInt
  projectId         BigInt
  stageId           BigInt
  status            LifecycleStatus
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  forms             Form[]
  project           Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  lifecycleStage    LifecycleStage    @relation(fields: [stageId], references: [id])
  lifecycleTemplate LifecycleTemplate @relation(fields: [templateId], references: [id])

  @@index([projectId])
  @@index([stageId])
  @@index([templateId])
}

model PoDetail {
  id             BigInt   @id @default(autoincrement())
  poNo           BigInt
  fromSupplierId BigInt?
  forCompanyId   BigInt?
  paymentMethod  String?  @db.VarChar(255)
  deliveryDate   BigInt?
  totalCost      BigInt?
  bidPrice       BigInt?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  company        Company? @relation(fields: [forCompanyId], references: [id])

  @@index([forCompanyId])
}

model PrDetail {
  id             BigInt    @id @default(autoincrement())
  prNo           String    @db.VarChar(255)
  dateRequired   DateTime? @db.Date
  forCompanyId   BigInt?
  fromSupplierId BigInt?
  preparedBy     String?   @db.VarChar(255)
  approvedBy     String?   @db.VarChar(255)
  totalCost      BigInt?
  bidPrice       BigInt?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  company        Company?  @relation(fields: [forCompanyId], references: [id])

  @@index([forCompanyId])
}

model Product {
  id          BigInt     @id @default(autoincrement())
  sku         String     @db.VarChar(255)
  name        String     @db.VarChar(255)
  description String
  brand       String     @db.VarChar(255)
  category    String     @db.VarChar(255)
  subCategory String     @db.VarChar(255)
  adCategory  String     @db.VarChar(255)
  uom         String     @db.VarChar(255)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  formItems   FormItem[]

  @@index([sku])
}

model Project {
  id                 BigInt      @id @default(autoincrement())
  companyId          BigInt
  code               String      @db.VarChar(255)
  description        String
  approvedBudgetCost BigInt?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  bidPercentage      BigInt      @default(15)
  lifecycles         Lifecycle[]
  company            Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
}

model QuotationDetail {
  id             BigInt    @id @default(autoincrement())
  quoteNo        String    @db.VarChar(255)
  forCompanyId   BigInt?
  requestorId    BigInt?
  deliveryDate   String?   @db.VarChar(255)
  approvedBudget BigInt?
  bidPercentage  Int?
  paymentMethod  String?   @db.VarChar(255)
  totalCost      BigInt?
  bidPrice       BigInt?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  company        Company?  @relation(fields: [forCompanyId], references: [id])

  @@index([forCompanyId])
}

model User {
  id            BigInt       @id @default(autoincrement())
  firstName     String       @db.VarChar(255)
  secondName    String       @db.VarChar(255)
  middleName    String       @db.VarChar(255)
  lastName      String       @db.VarChar(255)
  birthdate     DateTime     @db.Date
  contact       String       @db.VarChar(255)
  email         String       @unique @db.VarChar(255)
  password      String       @db.VarChar(255)
  department    String?      @db.VarChar(255)
  position      String?      @db.VarChar(255)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  emailVerified DateTime?
  accounts      Account[]
  auditLogs     AuditLog[]
  formRemarks   FormRemark[]
  sessions      Session[]
}

model Account {
  id                BigInt  @id @default(autoincrement())
  userId            BigInt
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           BigInt   @id @default(autoincrement())
  sessionToken String   @unique
  userId       BigInt
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AuditLog {
  id            BigInt      @id @default(autoincrement())
  timestamp     DateTime    @default(now())
  userId        BigInt?
  tableName     String      @db.VarChar(255)
  recordId      String      @db.VarChar(255)
  action        AuditAction
  oldValues     Json?
  newValues     Json?
  changedFields String[]
  ipAddress     String?     @db.VarChar(45)
  userAgent     String?
  user          User?       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([tableName])
  @@index([recordId])
  @@index([action])
  @@index([timestamp])
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
}

enum CompanyType {
  client
  supplier
  internal
  vendor
}

enum LifecycleStatus {
  TO_BID
  BID
  AWARDED
  PROCESSING
  COMPLETED
}

enum FormType {
  q
  pr
  po
}

enum ApprovalType {
  ANY
  ALL
}
